// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;
using Eigen::MatrixXd;
using Eigen::VectorXd;
using Eigen::Map;

typedef Map<MatrixXd> MapMatd;
typedef Map<VectorXd> MapVecd;

// test
List test(MapMatd& X);
RcppExport SEXP _rQESN_test(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMatd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(test(X));
    return rcpp_result_gen;
END_RCPP
}
// fitESN
MatrixXd fitESN(MapMatd& Xtrain, MapMatd& Ytrain, MapMatd& Xtest, List param);
RcppExport SEXP _rQESN_fitESN(SEXP XtrainSEXP, SEXP YtrainSEXP, SEXP XtestSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMatd& >::type Xtrain(XtrainSEXP);
    Rcpp::traits::input_parameter< MapMatd& >::type Ytrain(YtrainSEXP);
    Rcpp::traits::input_parameter< MapMatd& >::type Xtest(XtestSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(fitESN(Xtrain, Ytrain, Xtest, param));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rQESN_test", (DL_FUNC) &_rQESN_test, 1},
    {"_rQESN_fitESN", (DL_FUNC) &_rQESN_fitESN, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_rQESN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
